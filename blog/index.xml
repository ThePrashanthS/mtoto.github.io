<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Coding with Data</title>
    <link>http://tamaszilagyi.com/blog/index.xml</link>
    <description>Recent content in Blog on Coding with Data</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Jul 2017 21:13:14 -0500</lastBuildDate>
    <atom:link href="http://tamaszilagyi.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Analyzing My Spotify Listening History</title>
      <link>http://tamaszilagyi.com/blog/analyzing-my-spotify-listening-history/</link>
      <pubDate>Sun, 02 Jul 2017 21:13:14 -0500</pubDate>
      
      <guid>http://tamaszilagyi.com/blog/analyzing-my-spotify-listening-history/</guid>
      <description>&lt;div id=&#34;a-new-endpoint&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A new endpoint&lt;/h1&gt;
&lt;p&gt;Following an &lt;a href=&#34;https://github.com/spotify/web-api/issues/20&#34;&gt;avalanche of &lt;em&gt;+1&lt;/em&gt; comments&lt;/a&gt; on the GitHub issue requesting access to a user’s play history, on March 1st Spotify released &lt;a href=&#34;https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/&#34;&gt;a new endpoint&lt;/a&gt; to their Web API that allows anyone with a Spotify account to pull data on his or her most recently played tracks. To access it, you need go through the &lt;a href=&#34;https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow&#34;&gt;Authorization Code Flow&lt;/a&gt;, where you get keys and tokens needed for making calls to the API. The return object contains your 50 most recently played songs enriched by some contextual data.&lt;/p&gt;
&lt;p&gt;Being an avid Spotify user, I figured I could use my recently purchased &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; to ping the API every 3 hours, and start collecting my Spotify data. I started begin April, so now I have almost three months worth of listening history.&lt;/p&gt;
&lt;p&gt;How I set up a data pipeline that pings the API, parses the response and stores it as .json file, will be the subject of a follow-up post. Here, I will instead focus on exploring certain aspects of the data I thus far collected, using &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-do-we-have-here&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What do we have here&lt;/h1&gt;
&lt;p&gt;Besides my play history, I also store additional variables for every artist, album and playlist that I have listened to as separate json files. For the purpose of this post however, I’ll only focus on my listening history and additional data on artists. Let’s read the data into &lt;code&gt;R&lt;/code&gt;, using the &lt;code&gt;fromJSON()&lt;/code&gt; function from the &lt;code&gt;jsonlite&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(jsonlite)

df_arts &amp;lt;- fromJSON(&amp;quot;data/spotify_artist_2017-06-04.json&amp;quot;)
df_tracks &amp;lt;- fromJSON(&amp;quot;/data/spotify_tracks_2017-06-04.json&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important file is &lt;strong&gt;df_tracks&lt;/strong&gt;; this is the parsed response from the &lt;strong&gt;Recently Played Tracks&lt;/strong&gt; endpoint. Let’s take a look.&lt;/p&gt;
&lt;div id=&#34;df_tracks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;df_tracks&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    3274 obs. of  8 variables:
##  $ played_at  : chr  &amp;quot;2017-06-24T18:57:25.899Z&amp;quot; ...
##  $ artist_name:List of 3274
##   .. [list output truncated]
##  $ artist_id  :List of 3274
##   .. [list output truncated]
##  $ track_name : chr  &amp;quot;People In Tha Middle&amp;quot; ...
##  $ explicit   : logi  FALSE ...
##  $ uri        : chr  &amp;quot;spotify:user:1170891844:playlist:29XAftFCmwVBJ64ROX8gzA&amp;quot; ...
##  $ duration_ms: int  302138 226426 ...
##  $ type       : chr  &amp;quot;playlist&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a data.frame of &lt;strong&gt;3274 observations&lt;/strong&gt; and &lt;strong&gt;8 variables&lt;/strong&gt;. The number of rows is equal to the number of songs I have listened to, as the variable &lt;code&gt;played_at&lt;/code&gt; is unique in the dataset. Here’s a short description of the the variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;played_at&lt;/code&gt;: The timestamp when the track started playing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;artist_name&lt;/code&gt; &amp;amp; &lt;code&gt;artist_id&lt;/code&gt; : List of names and id’s of the artists of the song.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;track_name&lt;/code&gt;: Name of the track.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;: Do the lyrics contain bad words?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uri&lt;/code&gt;: Unique identifier of the context, either a &lt;em&gt;playlist&lt;/em&gt; or an &lt;em&gt;album&lt;/em&gt; (or empty).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;duration_ms&lt;/code&gt;: Number of miliseconds the song lasts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; : Type of the context in which the track was played.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can see two issues at first glance. For starters, the variable &lt;code&gt;played_at&lt;/code&gt; is of class &lt;code&gt;character&lt;/code&gt; while it should really be a timestamp. Secondly, both &lt;code&gt;artist_...&lt;/code&gt; columns are of class &lt;code&gt;list&lt;/code&gt; because one track can have several artists. This will become inconvenient when we want to use the variable &lt;code&gt;artist_id&lt;/code&gt; to merge the two datasets.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;df_arts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;df_arts&lt;/h2&gt;
&lt;p&gt;The second &lt;code&gt;data.frame&lt;/code&gt; consists of a couple of additional variables concerning the artists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    1810 obs. of  4 variables:
##  $ artist_followers : int  256962 30345 ...
##  $ artist_genres    :List of 1810
##   .. [list output truncated]
##  $ artist_id        : chr  &amp;quot;32ogthv0BdaSMPml02X9YB&amp;quot; ...
##  $ artist_popularity: int  64 57 ...&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;artist_followers&lt;/code&gt;: The number of Spotify users following the artist.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;artist_genres&lt;/code&gt; : List of genres the artist is associated with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;artist_id&lt;/code&gt;: Unique identifier of the artist.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;artist_popularity&lt;/code&gt;: Score from 1 to 100 regarding the artist’s popularity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By joining the two dataframes we are mostly looking to enrich the original data with &lt;code&gt;artist_genre&lt;/code&gt;, a variable we’ll use for plotting later on. Similarly to artists, albums and tracks also have &lt;a href=&#34;https://developer.spotify.com/web-api/endpoint-reference/&#34;&gt;API endpoints&lt;/a&gt; containing a genre field. However, the more granual you get, the higher the prevalance of no associated genres. However, there is quite some artists where genres is left blank.&lt;/p&gt;
&lt;p&gt;So, let’s unnest the list columns, convert &lt;code&gt;played_at&lt;/code&gt; to timestamp and merge the the dataset with &lt;strong&gt;df_arts&lt;/strong&gt;, using the key &lt;code&gt;&amp;quot;artist_id&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(tidyr)

merged &amp;lt;- df_tracks %&amp;gt;% 
        unnest(artist_name, artist_id) %&amp;gt;% 
        mutate(played_at = as.POSIXct(played_at, 
                                      tz = &amp;quot;CET&amp;quot;, 
                                      format = &amp;quot;%Y-%m-%dT%H:%M:%S&amp;quot;)) %&amp;gt;%
        left_join(df_arts, by=&amp;quot;artist_id&amp;quot;) %&amp;gt;% 
        select(-artist_id)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;my-top-10&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;My Top 10&lt;/h1&gt;
&lt;p&gt;First things first, what was my three month top 10 most often played songs?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top10 &amp;lt;- merged %&amp;gt;% 
        group_by(track_name) %&amp;gt;%
        summarise(artist_name = head(artist_name,1),
                  # cuz a song can have multiple artist
                  plays = n_distinct(played_at)) %&amp;gt;%
        arrange(-plays) %&amp;gt;%
        head(10)
top10&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##                         track_name      artist_name plays
##                              &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
##  1                          Habiba             Boef    14
##  2                       Too young          Phoenix    13
##  3                   Give Me Water       John Forte    11
##  4               Gentle Persuasion Doug Hream Blunt    10
##  5                   Dia Ja Manche    Dionisio Maio     9
##  6                   Run, Run, Run      Ann Peebles     9
##  7                         Heygana  Ali Farka Touré     8
##  8 It Ain&amp;#39;t Me (with Selena Gomez)             Kygo     8
##  9                   Perfect World     Broken Bells     8
## 10                       Bencalado       Zen Baboon     7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How did these songs reach the top? Is there a relationship between the first time I played the song in the past three months, the number of total plays, and the period I played each the song the most? One way to explore these questions is by plotting a cumulative histogram depicting the number of plays over time for each track.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using ggplot2
library(ggplot2)
library(zoo)

plot &amp;lt;- merged %&amp;gt;% 
        filter(track_name %in% top10$track_name) %&amp;gt;%
        mutate(doy = as.Date(played_at, 
                             format = &amp;quot;%Y-%m-%d&amp;quot;),
               track_name = factor(track_name, 
                                   levels = top10$track_name)) %&amp;gt;%
        complete(track_name, doy = full_seq(doy, period = 1)) %&amp;gt;%
        group_by(track_name) %&amp;gt;%
        filter(doy &amp;gt;= doy[min(which(!is.na(played_at)))]) %&amp;gt;% 
        distinct(played_at, doy) %&amp;gt;%
        mutate(cumulative_plays = cumsum(na.locf(!is.na(played_at)))) %&amp;gt;%
        ggplot(aes(doy, cumulative_plays,fill = track_name)) + 
        geom_area(position = &amp;quot;identity&amp;quot;) + 
        facet_wrap(~track_name, nrow  = 2) +
        ggtitle(&amp;quot;Cumulative Histogram of Plays&amp;quot;) +
        xlab(&amp;quot;Date&amp;quot;) +
        ylab(&amp;quot;Cumulative Frequency&amp;quot;) +
        guides(fill = FALSE) +
        theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../blog/2017/2017-06-02-spotifyR_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Most of the songs in my top 10 have a similar pattern: The first few days after discovering them, there is a sharp increase in the number of plays. Sometimes it takes a couple of listens for me to get into a track, but usually I start obsessing over it immedeately. One obvious exception is the song &lt;em&gt;Habiba&lt;/em&gt;, the song I listened to the most. The first time I heard the song, it must have gone unnoticed. Two months later, I started playing it virtually on repeat.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;listening-times&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Listening times&lt;/h1&gt;
&lt;p&gt;Moving on, let’s look at what time of the day I listen to Spotify the most. I expect weekdays to exhibit a somewhat different pattern than weekends. We can plot separate timelines of the total number of listens per hour of the day for both weekdays and weekends. Unfortunately, there are more weekdays then weekends, so we need to normalize their respective counts to arrive at a meaningful comparison.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(lubridate)

merged %&amp;gt;% group_by(time_of_day = hour(played_at),
                    weekend = ifelse(wday(played_at) %in% c(6:7),
                                   &amp;quot;weekend&amp;quot;, &amp;quot;weekday&amp;quot;)) %&amp;gt;%
        summarise(plays = n_distinct(played_at)) %&amp;gt;%
        mutate(plays = ifelse(weekend == &amp;quot;weekend&amp;quot;,plays/2,plays/5)) %&amp;gt;%
        ggplot(aes(time_of_day, plays, colour = weekend)) +
        geom_line() +
        ggtitle(&amp;quot;Number of Listens per hour of the day&amp;quot;) +
        xlab(&amp;quot;Hour&amp;quot;) +
        ylab(&amp;quot;Plays&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../blog/2017/2017-06-02-spotifyR_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Well, there’s a few interesting things here. On &lt;strong&gt;weekdays&lt;/strong&gt; I listen to slightly more music than on weekends, mostly due to regular listening habits early on and during the day. The peak in the morning corresponds to me biking to work, followed by dip around 10 (daily stand-ups anyone?). Then, I put my headphones back on until about 14:00, to finish my Spotify activities in the evening when I get home.&lt;/p&gt;
&lt;p&gt;On the other hand, I listen to slightly more music in the afternoon and evening when it’s &lt;strong&gt;weekend&lt;/strong&gt;. Additionally, all early hours listening happens solely on weekends.&lt;/p&gt;
&lt;p&gt;I am also interested whether there is such a thing as &lt;em&gt;morning artists vs afternoon/evening artists&lt;/em&gt;. In other words, which artists do I listen to more often in the morning than &lt;em&gt;after noon&lt;/em&gt;, or the other way around. The approach I took is to count the number plays by artists, and calculate a ratio of morning / evening for each one. The result I plotted with what is apparently called a &lt;a href=&#34;http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html#Diverging%20Lollipop%20Chart&#34;&gt;diverging lollipop chart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code snippet to produce this plot is tad bit too long to include here, but you can find all the code in the original RMarkdown file on &lt;a href=&#34;https://github.com/mtoto/mtoto.github.io/blob/master/blog/2017/2017-06-02-spotifyR.Rmd&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../blog/2017/2017-06-02-spotifyR_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On the y-axis we have the artists. The x-axis depicts the aforementioned ratio, and the size of the &lt;em&gt;lollipop&lt;/em&gt; stands for the number of plays in the given direction, also displayed by the label.&lt;/p&gt;
&lt;p&gt;The artists with the biggest divergences are &lt;a href=&#34;https://open.spotify.com/artist/0HlOk15cW7PeziVcItQLco&#34;&gt;Zen Mechanics&lt;/a&gt; and &lt;a href=&#34;https://open.spotify.com/artist/1k8VBufn1nBs8LN9n4snc8&#34;&gt;Stereo MC’s&lt;/a&gt;. For both artists, the number of plays is almost equal to the difference ratio. That means I played songs in the opposite timeframe &lt;strong&gt;only once&lt;/strong&gt;. As a matter of fact, there are artists such as &lt;a href=&#34;https://open.spotify.com/artist/03HEHGJoLPdARs4nrtUidr&#34;&gt;Junior Kimbrough&lt;/a&gt; or &lt;a href=&#34;https://open.spotify.com/artist/3mNygoyrEKLgo6sx0MzwOL&#34;&gt;Ali Farka Touré&lt;/a&gt; whom I played more often in each direction, but because the plays are distributed more evenly, the ratio is not as extreme.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;artist-genres&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Artist Genres&lt;/h1&gt;
&lt;p&gt;Lastly, let’s look at genres. Just as a track can have more than one artist to it, so can an artist have multiple associated genres, or no genre at all. To make our job less cumbersome, we first reduce our data to one genre per artist. We calculate the count of each genre in the whole dataset, and consequently select only one per artist; the one with the highest frequency. What we lose in detail, we gain in comparability.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)
# unnest genres
unnested &amp;lt;- merged %&amp;gt;% 
        mutate(artist_genres =  replace(artist_genres,
                                        map(artist_genres,length)==0, 
                                        list(&amp;quot;none&amp;quot;))) %&amp;gt;%
        unnest(artist_genres)
# calculate count and push &amp;quot;none&amp;quot; to the bottom 
# so it is not included in the top genres.
gens &amp;lt;- unnested %&amp;gt;% 
        group_by(artist_genres) %&amp;gt;% 
        summarise(genre_count=n()) %&amp;gt;%
        mutate(genre_count = replace(genre_count, 
                                     artist_genres==&amp;quot;none&amp;quot;,
                                     0))
# get one genre per artisst
one_gen_per_a &amp;lt;- unnested %&amp;gt;% 
        left_join(gens, by = &amp;quot;artist_genres&amp;quot;) %&amp;gt;%
        group_by(artist_name) %&amp;gt;%  
        filter(genre_count == max(genre_count)) %&amp;gt;%
        mutate(first_genre = head(artist_genres,1)) %&amp;gt;%
        filter(artist_genres == first_genre)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the genre column is dealt with, we can proceed to look at my favourite genres.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##         artist_genres plays
##                 &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
##  1         jazz blues   401
##  2            hip hop   351
##  3 psychedelic trance   302
##  4               funk   251
##  5         electronic   210
##  6                pop    79
##  7           psychill    70
##  8           afrobeat    64
##  9       classic rock    63
## 10          chillstep    62&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, I am interested in whether there is a pattern in the genres I listen to. More specifically, it would be cool to see how my preferences evolve over time, if at all. The axes I want to plot my data along are the cumulative frequency and recency of songs played of a given genre.&lt;/p&gt;
&lt;p&gt;This is exactly what &lt;strong&gt;lifecycle grids&lt;/strong&gt; are made of, albeit usually used for customer segmentation. In a classical example, the more often you purchased a product, and the more recent your last puchase was, the more valuable you are as customer. I first read about these charts on &lt;a href=&#34;http://analyzecore.com/2015/02/16/customer-segmentation-lifecycle-grids-with-r/&#34;&gt;the analyzecore blog&lt;/a&gt;, which discusses these plots in more detail, including full code examples in &lt;code&gt;ggplot2&lt;/code&gt;. I highly recommend reading it if you’re interested.&lt;/p&gt;
&lt;p&gt;Clearly, we are not concerned with customer segmentation here, but what if we substituted customers with artist genres, and purchases with listens. These charts are like snapshots: how the grid is filled depends on the moment in time it was plotted. So to add an extra layer of intution, I used the &lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34;&gt;gganimate package&lt;/a&gt; to create an animated plot that follows my preferences as days go by.&lt;/p&gt;
&lt;p&gt;To be able to generate such a plot, we need to expand our dataset to include all possible combinations of dates and genres and deal with resulting missing values appropriately:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;genres_by_day &amp;lt;- one_gen_per_a %&amp;gt;%
        # only look at top 20 genres
        filter(artist_genres %in% top20genres$artist_genres) %&amp;gt;%
        group_by(artist_genres, doy = as.Date(played_at)) %&amp;gt;%
        arrange(doy) %&amp;gt;%
        summarise(frequency=n_distinct(played_at)) %&amp;gt;%
        ungroup() %&amp;gt;%
        complete(artist_genres, doy = full_seq(doy, period = 1))  %&amp;gt;%
        group_by(artist_genres) %&amp;gt;%
        mutate(frequency = replace(frequency,
                                   is.na(frequency),
                                   0),
               first_played = min(doy[min(which(frequency!=0))]),
               last_played = as.Date(ifelse(frequency==0, NA, doy)),
               cumulative_frequency = cumsum(frequency),
               last_played = replace(last_played, 
                                     doy &amp;lt; first_played, 
                                     first_played),
               last_played = na.locf(last_played),
               recency = doy - last_played)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After binning both &lt;code&gt;cumulative_frequency&lt;/code&gt; and &lt;code&gt;recency&lt;/code&gt; from the resulting dataset, we can proceed with creating our animated lifecycle grid using &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;gganimate&lt;/code&gt;. All we need to do is specify the &lt;code&gt;frame =&lt;/code&gt; variable inside the &lt;code&gt;aes()&lt;/code&gt;, and our plot comes to life!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg_life &amp;lt;- genres_by_day %&amp;gt;%
        ggplot(aes(x=genre, y=cumulative_frequency, fill=artist_genres, frame = doy, alpha = 0.8)) +
        theme_bw() +
        theme(panel.grid = element_blank())+
        geom_bar(stat=&amp;quot;identity&amp;quot;,position=&amp;quot;identity&amp;quot;) +
        facet_grid(segm.freq ~ segm.rec, drop = FALSE) +
        ggtitle(&amp;quot;LifeCycle Grid&amp;quot;) +
        xlab(&amp;quot;Genres&amp;quot;) +
        ylab(&amp;quot;Cumulative Frequency&amp;quot;) +
        guides(fill = guide_legend(ncol = 1),
               alpha = FALSE)
        
gganimate(gg_life)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://tamaszilagyi.com/img/lifecycle.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;More than anything, the plot makes it obvious that I cannot go on for too long without listening to my favourite genres such as &lt;code&gt;jazz blues&lt;/code&gt;, &lt;code&gt;hip hop&lt;/code&gt; and &lt;code&gt;psychedelic trance&lt;/code&gt;. My least often played genres from the top 20 on the other hand are distributed pretty evenly accross the &lt;strong&gt;recency axis&lt;/strong&gt; of my plot in the last row (containing genres with less than or equal to 50 listens).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;whats-left&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What’s left?&lt;/h1&gt;
&lt;p&gt;Clearly, there are tons of other interesting questions that could be explored using this dataset. We could for example look at how many tracks I usually listen to in one go, which songs I skipped over, how my different playlists are growing over time, which playlist or albums I listen to the most…and the list goes on.&lt;/p&gt;
&lt;p&gt;I’ll go into more detail on my apprach to automating acquisition and cleaning of this data in a next post, but if you just cannot wait to start collecting your own Spotify listening history, I encourage you to go through &lt;a href=&#34;https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow&#34;&gt;Spotify’s authoriziation flow&lt;/a&gt; and set up a simple cronjob that pings the API &lt;em&gt;X times a day&lt;/em&gt;. The sooner you start collecting your data, the more you’ll have to play with. Eveything else can be dealt with later.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Starting a blog(down)</title>
      <link>http://tamaszilagyi.com/blog/starting-a-blogdown/</link>
      <pubDate>Sun, 14 May 2017 21:13:14 -0500</pubDate>
      
      <guid>http://tamaszilagyi.com/blog/starting-a-blogdown/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;starting-an-analytics-blog&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Starting an analytics blog&lt;/h1&gt;
&lt;p&gt;Having learned lots from the open source community over the past years - from blogs and videos to attending meetups and awesome conferences - I have decided to start a blog myself, and share some of the things I find interesting. I expect most of the posts to be &lt;code&gt;R&lt;/code&gt; specific, because that’s what I am most comfortable with. However I do enjoy fiddling with other technologies such as &lt;code&gt;Python&lt;/code&gt; or &lt;code&gt;Spark&lt;/code&gt;, so watch out! In a nuthsell though, this blog will be about using open source tools to build all sorts of cool things with &lt;strong&gt;data&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;its-easy&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;It’s easy&lt;/h1&gt;
&lt;p&gt;You can get your blog up and running with literally three lines of &lt;code&gt;R&lt;/code&gt; code. After hearing about the &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt; package on Twitter, I went ahead and downloaded the current build from Github, running &lt;code&gt;install_github(&#39;rstudio/blogdown&#39;)&lt;/code&gt; inside &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Under the hood, blogdown uses &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to generate the website, but wraps most functionality nicely, so there’s no need for much manual configuration during the process, if at all.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;We first create a folder for the blog on our computer, and set it as our home directory using &lt;code&gt;setwd(&amp;quot;path-to-blog&amp;quot;)&lt;/code&gt;. Then we simply run:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 1 if you haven&amp;#39;t already, install blogdown
devtools::install_github(&amp;#39;rstudio/blogdown&amp;#39;)
# 2 install hugo
blogdown::install_hugo()
# 3 create new site
blogdown::new_site()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it. You now have a complete folder structure initialized in your working directory:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/mtoto/mtoto.github.io/master/blog/2017/img/folderstruct.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;The local build of your new site is now running on &lt;code&gt;localhost&lt;/code&gt;. You can see it in RStudio’s Viewer, or inside a browser by clicking &lt;em&gt;Show in new window&lt;/em&gt; in the top left corner of the Viewer.&lt;/p&gt;
&lt;p&gt;You future blog posts will reside in the &lt;code&gt;content/post&lt;/code&gt; folder. Here we find two pre-existing posts as &lt;code&gt;.Rmd&lt;/code&gt; files. We can start editing these straight away and see the results immediately after saving. Because everytime you save changes, your site is instantly rebuilt. If you come back to work on your existing site, you can simply run the function &lt;code&gt;serve_site()&lt;/code&gt; after you are done editing, and see the site regenerated accordingly in the Viewer.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;customization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Customization&lt;/h2&gt;
&lt;p&gt;Now we can begin to customize the look of our blog by installing a theme using the function &lt;code&gt;install_theme(&#39;username/theme&#39;)&lt;/code&gt;. For my site, I picked &lt;a href=&#34;https://github.com/nishanths/cocoa-hugo-theme&#34;&gt;nishanths/cocoa-hugo-theme&lt;/a&gt; which I like very much for its minimalistic design. You can browse other themes on &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes.gohugo.io/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;configuration&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The only thing left to do, is to edit the &lt;code&gt;config.toml&lt;/code&gt; file and set the name of your blog, avatars, or even link a &lt;code&gt;Google Analytics&lt;/code&gt; account - if the theme allows for. The file contains parameters such as:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;title        = &amp;quot;Tamas Szilagyi&amp;quot;
baseurl      = &amp;quot;http://tamaszilagyi.com/&amp;quot;
relativeurls = true
languageCode = &amp;quot;en-us&amp;quot;
theme        = &amp;quot;cocoa-hugo-theme&amp;quot;
faviconfile  = &amp;quot;img/leaf.ico&amp;quot;
github       = &amp;quot;//github.com/mtoto&amp;quot;
highlightjs  = true
avatar       = &amp;quot;img/profile_pic.png&amp;quot; 
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are going to include &lt;code&gt;R&lt;/code&gt; codechunks in your posts, also don’t forget to set &lt;code&gt;highlightjslanguages = [&amp;quot;r&amp;quot;]&lt;/code&gt;. When the blog is ready, we run &lt;code&gt;build_site()&lt;/code&gt; to compile the files to &lt;code&gt;html&lt;/code&gt; and build the website. What we need for deployment will reside under the &lt;code&gt;/public&lt;/code&gt; folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deployment&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Again, publishing is a piece of cake. There are &lt;a href=&#34;https://bookdown.org/yihui/blogdown/deployment.html&#34;&gt;multiple ways&lt;/a&gt; for conveniently deploying a blogdown site, and being somewhat familiar with &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;, that’s what I went for. I created a new repository named &lt;code&gt;mtoto.github.io&lt;/code&gt; and simply pushed the contents of &lt;code&gt;/public&lt;/code&gt; to the master branch.&lt;/p&gt;
&lt;p&gt;The website should be almost immediately available at the same address as the repo name. If you want an url other than &lt;code&gt;username.github.io&lt;/code&gt; however, you will need to sign up with a hosting provider. Then put a file in the &lt;code&gt;/public&lt;/code&gt; folder called &lt;code&gt;CNAME&lt;/code&gt;, with a one liner containing your blog url such as &lt;code&gt;tamaszilagyi.com&lt;/code&gt;. After, you push this file to Github and ask your provider to point your domain to the github pages url.&lt;/p&gt;
&lt;p&gt;And voilà, we have ourselves a full functioning static website that looks great, is easy to manage and as portable as it gets may you decide to switch for different hosting solutions.&lt;/p&gt;
&lt;p&gt;For a more in-depth overview of what &lt;code&gt;blogdown&lt;/code&gt; is capable of, keep an eye on its &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;bookdown site&lt;/a&gt; which is currently under development.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>